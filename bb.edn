
{:paths ["bin" "src" "test"] ;;for now
 :deps {org.clojure/clojure {:mvn/version "1.10.3"}
        lambdaisland/kaocha {:git/url "https://github.com/lambdaisland/kaocha.git"
                             :git/sha "a764e6713990c0c41bebcec38f6f8a6c5ae3f269"}}
 :tasks 
 {generate-simple (let [file-str "(ns lambdaisland.simple.nausem%02d-test\n(:require [clojure.test :refer :all])\n)\n\n(deftest should-pass\n(testing \"ridiculous test that should pass\"\n  (is (do (Thread/sleep 1000) (= 1 1)))))" ]
             (doseq [n (range 100)] 
               (spit  (str "test/lambdaisland/simple_nested/nausem" (format "%02d" n) "_test.clj") (format file-str n))))
  generate-simple-nested  (let [header "(ns lambdaisland.simple-nested.nausem%02d-test\n(:require [clojure.test :refer :all])\n)\n\n"
                                tests (for [i (range 100)] (format "(deftest should-pass-%d\n(testing \"ridiculous test that should pass\"\n  (is (do (Thread/sleep 1000) (= 1 1)))))\n" i) )
                                tests-str (apply str tests)
                                file-str (str header tests-str)]
             (doseq [n (range 10)] 
               (spit  (str "test/lambdaisland/simple_nested/nausem" (format "%02d" n) "_test.clj") (format file-str n))))
 
generate-simple-fail (let [file-str "(ns lambdaisland.simple-fail.nausem%02d-test\n(:require [clojure.test :refer :all])\n)\n\n(deftest should-pass\n(testing \"ridiculous test that should pass\"\n  (is (do (Thread/sleep 1000) (= 1 2)))))" ]
             (doseq [n (range 100)] 
               (spit  (str "test/lambdaisland/simple_fail/nausem" (format "%02d" n) "_test.clj") (format file-str n))))

generate-io (let [file  "(ns lambdaisland.io.nausem%03d-test\n(:require [clojure.test :refer :all])\n)\n\n(deftest should-pass\n(testing \"ridiculous test that should pass\"\n  (is (not (empty? (slurp \"README.md\")))) ))" ] 
              (doseq [n (range 1000)] 
                (spit  (str "test/lambdaisland/io/nausem" (format "%03d" n) "_test.clj") (format file n) )))
generate-wiki (let [file  "(ns lambdaisland.wiki.nausem%02d-test\n(:require [clojure.test :refer :all])\n)\n\n(deftest should-pass\n(testing \"ridiculous test that should pass\"\n  (is (not (empty? (slurp \"https://en.wikipedia.org/wiki/Special:Random\" )))) ))" ] 
              (doseq [n (range 25)] 
                (spit  (str "test/lambdaisland/wiki/nausem" (format "%02d" n) "_test.clj") (format file n) )))

 generate-sqrts (let [file  "(ns lambdaisland.wiki.nausem%02d-test\n(:require [clojure.test :refer :all])\n)\n\n(deftest should-pass\n(testing \"calculation heavy test\"\n  (is (< (last (for [n (range 1000)] (Math/sqrt n))) 100 ))  ))" ] 
                  (doseq [n (range 25)] 
                    (spit  (str "test/lambdaisland/wiki/nausem" (format "%02d" n) "_test.clj") (format file n) )))
               

generate-all (do (run generate-simple)
                 (run generate-io))}}
